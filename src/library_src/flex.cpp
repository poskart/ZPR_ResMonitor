	#include "configrawdata.hpp"
	#include <vector>
	#include <cmath>
	#include <iostream>
	#include <fstream>
	
	// duration helpers
	const long SEC_IN_MIN = 60;
	const long SEC_IN_HOUR = SEC_IN_MIN * 60;
	const long SEC_IN_DAY = SEC_IN_HOUR * 24;
	// sumaric duration time in seconds for current element
	long currentDurationTime;
	// last read value - eg. number of hours. Will be multiplied by
	// specifc multipler (for hour - 3600) and added to currentDurationTime
	long lastReadDurationElement;
		
	// triggerTypes	
	TriggerType currentTriggerType;
	std::vector<TriggerType> triggerTypes;
	ResourceValue currentResourceValue;
	std::vector<ResourceValue> triggerResourceValues;
	std::vector<long> triggerDurationTimes;
	
	// logTypes
	LogType currentLogType;
	std::vector<LogType> logTypes;
	std::vector<long> logDurations;
	std::vector<long> logResolutions;
	
	static void clearHelperVectors() {
		triggerResourceValues.clear();
		triggerDurationTimes.clear();
		logDurations.clear();
		logResolutions.clear();
	}

	static void produceTriggersCrossproduct() {
		for (auto &&res : triggerResourceValues) {
			for (auto &&duration : triggerDurationTimes) {
				currentTriggerType.value = res;
				currentTriggerType.duration = duration;
				triggerTypes.push_back(currentTriggerType);
			}
		}
		triggerResourceValues.clear();
		triggerDurationTimes.clear();
	}
	
	static void produceLogsCrossproduct() {
		for (auto &&duration : logDurations) {
			for (auto &&res : logResolutions) {
				currentLogType.resolution = res;
				currentLogType.duration = duration;
				logTypes.push_back(currentLogType);
			}
		}
		logDurations.clear();
		logResolutions.clear();
	}
	
#line 69 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file; 
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "../../include/flex.hpp"

int yyFlexLexer::yywrap() { return 1; }

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 70
#define YY_END_OF_BUFFER 71
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[316] =
    {   0,
        0,    0,   65,   65,   32,   32,    0,    0,    0,    0,
        0,    0,   32,   32,    0,    0,    0,    0,    0,    0,
       65,   65,   71,   70,   66,   67,   70,   70,   50,   65,
       43,   38,   70,   70,   70,   70,   70,   42,   41,   40,
       39,   59,   32,   32,    9,   12,    8,   70,   70,   70,
       70,   70,   70,   70,   24,   23,   22,   21,   13,   66,
        9,   12,    8,   70,   70,   13,   66,   70,   14,   70,
       70,   66,   25,   20,   24,   23,   22,   21,   26,   32,
       27,   31,   30,   29,   28,   66,   43,   38,   42,   41,
       40,   39,   70,   50,   45,   49,   48,   47,   46,   66,

       58,   53,   57,   56,   55,   54,   59,   65,   60,   64,
       63,   62,   61,   66,   67,    0,    0,   50,   43,   42,
       41,   40,   39,   59,   65,   43,   38,    0,    0,    0,
        0,    0,   44,   59,   32,    9,   12,    0,    0,    0,
       24,   23,   22,   21,   13,   32,   15,   12,    8,    0,
        0,   11,    0,   10,    0,    0,    0,   13,   26,   66,
        9,   12,    0,    0,   13,   12,    8,   11,   10,   13,
       66,    0,    0,    0,   14,    0,    0,   66,   25,   24,
       23,   22,   21,   26,   25,   20,   26,   32,   31,   30,
       29,   28,   27,   66,   43,   42,   41,   40,   39,    0,

       43,   38,   44,   50,   49,   48,   47,   46,   45,   66,
       58,   57,   56,   55,   54,   59,   58,   53,   59,   65,
       64,   63,   62,   61,   60,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   17,    0,    0,    0,   16,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   68,    0,   33,    0,   37,    0,    0,    1,
        0,   11,   11,    0,   10,   10,    0,    0,    0,   11,
       11,   10,   10,    0,    0,    0,    0,    0,   35,   36,
        0,    0,    3,   19,   19,    0,    7,    0,    0,   36,
        0,    0,   18,    0,    0,    6,    5,    0,   34,    0,

       18,    0,    2,    6,    4,   69,    0,    0,    4,    0,
        0,   52,   51,   51,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    5,    1,    1,    1,
        1,    1,    1,    6,    1,    1,    7,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    1,
        1,    1,    1,    1,    9,   10,   11,   12,   13,   14,
       15,    1,   16,    1,   17,   18,   19,   20,   21,   22,
        1,   23,   24,   25,   26,   27,    1,    1,   28,    1,
        1,    1,    1,    1,    1,    1,   29,   30,   31,   32,

       33,   34,   35,   36,   37,    1,   38,   39,   40,   41,
       42,   43,    1,   44,   45,   46,   47,   48,    1,    1,
       49,    1,   50,    1,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[52] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1
    } ;

static yyconst flex_uint16_t yy_base[317] =
    {   0,
        0,    3,   48,    0,   98,    0,  148,    0,  198,  248,
      298,    0,  348,  398,  448,  498,  548,  598,  648,  698,
      748,  798,  392, 1150,    6,  388,    1,    0,  848,  375,
        7,  336,    2,    0,    5,    0,    1,    1, 1150,    2,
     1150,   27,  898,  333,   51,   59,  318,    5,    3,    2,
       48,   65,   37,    0,   49, 1150,   95, 1150,  118,  948,
     1150,   66,  314,   66,   81,   70,  155,   79,  288,   97,
      102,  998,  137,  276, 1150, 1150, 1150, 1150,  144,  175,
      266, 1150, 1150, 1150, 1150, 1048,  160,  261, 1150, 1150,
     1150, 1150,  167,  176,  239, 1150, 1150, 1150, 1150, 1098,

      180,  228, 1150, 1150, 1150, 1150,  189,  194,  224, 1150,
     1150, 1150, 1150,  220,  216,  100,   81,    0,  221, 1150,
     1150, 1150, 1150,  225,  211,  233,  201,  129,  141,  145,
      178,  186,  238,  198,    0,  241,  242,  151,  176,  238,
     1150, 1150,  241, 1150,  255,  172,  258,  262,  164,  229,
      237,  268,  241,  285,  254,  264,  266,  277,  155,    0,
     1150,  289,  275,  285,  306,  310,  134,  294,  302,  316,
      327,  317,  317,  325,  128,  364,  368,    0,  321, 1150,
     1150, 1150, 1150,  337,  355,  123,  361,  377, 1150, 1150,
     1150, 1150,  118,    0,  356, 1150, 1150, 1150, 1150,  372,

      381,  106,  385,  392, 1150, 1150, 1150, 1150,   81,    0,
      393, 1150, 1150, 1150, 1150,  412,  401,   50,  416,  408,
     1150, 1150, 1150, 1150,   28,  419,  338,  423,  331,  427,
      340,  356,  431,  409,  437,  412,  418,  420,  456,  422,
      427,  434,  438,  446,  438,  440,  441,  444,  445,  446,
      447,  449,  473,  463,  493,  499,  503,  464,  478,  507,
      508,  511,  512,  516,  517,  520,  500,  523,  503, 1150,
     1150, 1150, 1150,  527,  531,  535,  538,  515,  553,  556,
      513,  519,  557,  561,  567,  518,  566,  570,  541,  571,
      574,  552,  585,  561,  588,  592,  603,  593,  606,  575,

      611,  591,  616,  617,  620,  621,  605,  625,  629,  616,
      635,  640,  644,  656, 1150,    0
    } ;

static yyconst flex_int16_t yy_def[317] =
    {   0,
      316,  316,  316,    3,  316,    5,  316,    7,    7,    7,
        7,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,   29,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,   43,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,   60,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,   72,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,   86,  315,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  315,  100,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,    0,  315
    } ;

static yyconst flex_uint16_t yy_nxt[1202] =
    {   0,
       24,   25,   26,   25,   25,   26,   25,  114,  126,  114,
      126,  152,  131,  132,  131,  129,  129,   27,  151,  157,
       27,  116,  117,  128,   28,  130,  150,   28,  133,  134,
      133,  152,  131,  132,  131,  225,  129,  129,   27,  151,
      157,   27,  116,  117,  128,   28,  130,  150,   28,   29,
       30,   29,  147,   31,  147,   32,  153,  218,   33,   34,
      148,   35,  148,  156,  151,   27,   36,  166,  116,  166,
       37,  170,   28,  170,  154,  168,  153,  155,   33,   38,
      147,   35,  147,   39,  156,  151,   27,   40,  209,  116,
      169,   37,   41,   28,  154,  168,  227,  155,   42,   43,

       44,   43,   45,   46,  154,   47,  176,  155,   48,   49,
      169,  177,   50,  202,  226,   51,   52,  227,   53,  158,
      159,  158,   28,   54,  154,  193,  176,  155,   48,   55,
      186,  177,   50,   56,  226,  175,   51,   57,  185,   53,
      185,  167,   58,   28,   54,  187,  159,  187,   59,   60,
       26,   60,   61,   62,  228,   63,  171,  159,  171,  172,
      152,  201,   64,  201,  229,   27,   65,  230,  203,  173,
      203,  149,   28,  174,  146,  228,  188,  204,  188,  204,
      152,  217,   64,  217,  153,  229,   27,   65,  230,  173,
      219,  134,  219,   28,  174,  220,  231,  220,   66,   67,

      134,   67,   68,   24,  153,   69,  189,  205,  127,  232,
      190,  206,   70,  125,  191,  207,   71,  231,  115,  192,
      208,  114,  126,  114,  126,  221,  133,  134,  133,  222,
      232,  225,   70,  223,  126,  218,  126,   71,  224,  133,
      134,  133,  147,  148,  147,  148,  209,  154,   24,   67,
      154,   67,   68,   24,  233,   69,  158,  159,  158,  147,
      234,  147,   70,  148,  238,  148,   71,  154,  202,  235,
      154,  235,  242,  193,  236,  233,  243,  244,  158,  159,
      158,  234,   70,  186,  168,  238,  239,   71,  239,  237,
      166,  240,  166,  242,  169,  175,  243,  244,   24,   72,

      245,   72,   24,   73,  168,   74,  241,  170,  247,  170,
      237,  166,   24,  166,  169,  246,   24,  170,  147,  170,
      147,  167,  185,  248,  185,  149,  176,  241,  171,   75,
      171,  172,   24,   76,  177,  146,  246,   77,  187,  159,
      187,  173,   78,  127,  248,  174,  176,  256,   79,   80,
       44,   80,  254,   24,  177,   81,  185,  201,  185,  201,
      258,  173,  187,  159,  187,  235,  174,  235,  256,  239,
      249,  239,  254,  203,  251,  203,  259,  125,  188,   82,
      188,  258,  201,   83,  201,  250,  203,   84,  203,  252,
      115,  315,   85,  204,  217,  204,  217,  259,   24,   80,

       44,   80,  217,   24,  217,   81,  250,  315,  189,  220,
      252,  220,  190,  219,  134,  219,  191,  219,  134,  219,
      253,  192,  253,  205,  255,  261,  255,  206,  257,   82,
      257,  207,  260,   83,  260,  262,  208,   84,  235,  221,
      235,  263,   85,  222,  264,  265,  261,  223,   24,   86,
      266,   86,  224,   87,  267,   88,  262,  239,  269,  239,
      268,  270,  263,  271,  272,  264,  265,  273,  274,  275,
      276,  266,  277,  315,  253,  267,  253,  278,  269,   89,
      315,  268,  270,   90,  271,  272,  281,   91,  273,  274,
      275,  276,   92,  277,  255,  282,  255,  278,   93,   86,

      279,   86,  279,   87,  257,   88,  257,  281,  260,  283,
      260,  283,  235,  235,  235,  235,  282,  284,  239,  285,
      239,  239,  286,  239,  287,  288,  287,  289,  235,   89,
      235,  315,  235,   90,  235,  315,  239,   91,  239,  239,
      291,  239,   92,  286,  292,  295,  288,  289,   93,   94,
      315,   94,  280,   24,  279,   95,  279,  290,  283,  290,
      283,  291,  284,  298,  284,  292,  295,  287,  284,  287,
      284,  297,  290,  297,  290,  299,  300,  299,  315,   96,
      294,  302,  315,   97,  298,  315,  301,   98,  301,  303,
      307,  303,   99,  304,  306,  304,  306,  300,   24,   94,

      294,   94,  302,   24,  297,   95,  297,  299,  315,  299,
      293,  307,  301,  308,  301,  296,  293,  303,  304,  303,
      304,  309,  306,  309,  306,  310,  284,  315,  284,   96,
      309,  315,  309,   97,  308,  311,  312,   98,  312,  315,
      315,  312,   99,  312,  315,  314,  310,  314,   24,  100,
      315,  100,  305,  101,  315,  102,  311,  314,  315,  314,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  103,
      315,  315,  315,  104,  315,  315,  315,  105,  315,  313,
      315,  315,  106,  315,  315,  315,  315,  315,  107,  100,

      315,  100,  315,  101,  315,  102,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  103,
      315,  315,  315,  104,  315,  315,  315,  105,  315,  315,
      315,  315,  106,  315,  315,  315,  315,  315,  107,  108,
       30,  108,  315,   24,  315,  109,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  110,
      315,  315,  315,  111,  315,  315,  315,  112,  315,  315,
      315,  315,  113,  315,  315,  315,  315,  315,   24,  108,

       30,  108,  315,   24,  315,  109,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  110,
      315,  315,  315,  111,  315,  315,  315,  112,  315,  315,
      315,  315,  113,  315,  315,  315,  315,  315,   24,  118,
      315,  118,  315,  119,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  120,
      315,  315,  315,  121,  315,  315,  315,  122,  315,  315,
      315,  315,  123,  315,  315,  315,  315,  315,  124,  135,

      315,  135,  136,  137,  315,  315,  315,  315,  315,  315,
      315,  315,  138,  315,  315,  139,  140,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  141,
      315,  315,  138,  142,  315,  315,  139,  143,  315,  315,
      315,  315,  144,  315,  315,  315,  315,  315,  145,  160,
      315,  160,  161,  162,  315,  315,  315,  315,  315,  315,
      315,  315,  163,  315,  315,  315,  164,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  163,  315,  315,  315,  315,  164,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  165,  178,

      315,  178,  315,  179,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  180,
      315,  315,  315,  181,  315,  315,  315,  182,  315,  315,
      315,  315,  183,  315,  315,  315,  315,  315,  184,  194,
      315,  194,  315,  195,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  196,
      315,  315,  315,  197,  315,  315,  315,  198,  315,  315,
      315,  315,  199,  315,  315,  315,  315,  315,  200,  210,

      315,  210,  315,  211,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  212,
      315,  315,  315,  213,  315,  315,  315,  214,  315,  315,
      315,  315,  215,  315,  315,  315,  315,  315,  216,   23,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315
    } ;

static yyconst flex_int16_t yy_chk[1202] =
    {   0,
      316,    1,    1,    1,    2,    2,    2,   25,   31,   25,
       31,   50,   36,   37,   40,   34,   38,    1,   49,   54,
        2,   27,   28,   33,    1,   35,   48,    2,   42,   42,
       42,   50,   36,   37,   40,  225,   34,   38,    1,   49,
       54,    2,   27,   28,   33,    1,   35,   48,    2,    3,
        3,    3,   45,    3,   45,    3,   51,  218,    3,    3,
       46,    3,   46,   53,   55,    3,    3,   62,   51,   62,
        3,   66,    3,   66,   52,   64,   51,   52,    3,    3,
       68,    3,   68,    3,   53,   55,    3,    3,  209,   51,
       65,    3,    3,    3,   52,   64,  117,   52,    3,    5,

        5,    5,    5,    5,   57,    5,   70,   57,    5,    5,
       65,   71,    5,  202,  116,    5,    5,  117,    5,   59,
       59,   59,    5,    5,   57,  193,   70,   57,    5,    5,
      186,   71,    5,    5,  116,  175,    5,    5,   73,    5,
       73,  167,    5,    5,    5,   79,   79,   79,    5,    7,
        7,    7,    7,    7,  128,    7,   67,  159,   67,   67,
      138,   87,    7,   87,  129,    7,    7,  130,   93,   67,
       93,  149,    7,   67,  146,  128,   80,   94,   80,   94,
      138,  101,    7,  101,  139,  129,    7,    7,  130,   67,
      107,  107,  107,    7,   67,  108,  131,  108,    7,    9,

      134,    9,    9,    9,  139,    9,   80,   94,  127,  132,
       80,   94,    9,  125,   80,   94,    9,  131,  115,   80,
       94,  114,  119,  114,  119,  108,  124,  124,  124,  108,
      132,  109,    9,  108,  126,  102,  126,    9,  108,  133,
      133,  133,  136,  137,  136,  137,   95,  140,    9,   10,
      143,   10,   10,   10,  150,   10,  145,  145,  145,  147,
      151,  147,   10,  148,  153,  148,   10,  140,   88,  152,
      143,  152,  155,   81,  152,  150,  156,  157,  158,  158,
      158,  151,   10,   74,  163,  153,  154,   10,  154,  152,
      162,  154,  162,  155,  164,   69,  156,  157,   10,   11,

      168,   11,   11,   11,  163,   11,  154,  165,  169,  165,
      152,  166,   11,  166,  164,  168,   11,  170,  172,  170,
      172,   63,  179,  169,  179,   47,  173,  154,  171,   11,
      171,  171,   11,   11,  174,   44,  168,   11,  184,  184,
      184,  171,   11,   32,  169,  171,  173,  229,   11,   13,
       13,   13,  227,   13,  174,   13,  185,  195,  185,  195,
      231,  171,  187,  187,  187,  176,  171,  176,  229,  177,
      176,  177,  227,  200,  177,  200,  232,   30,  188,   13,
      188,  231,  201,   13,  201,  176,  203,   13,  203,  177,
       26,   23,   13,  204,  211,  204,  211,  232,   13,   14,

       14,   14,  217,   14,  217,   14,  176,    0,  188,  220,
      177,  220,  188,  216,  216,  216,  188,  219,  219,  219,
      226,  188,  226,  204,  228,  234,  228,  204,  230,   14,
      230,  204,  233,   14,  233,  236,  204,   14,  235,  220,
      235,  237,   14,  220,  238,  240,  234,  220,   14,   15,
      241,   15,  220,   15,  242,   15,  236,  239,  244,  239,
      243,  245,  237,  246,  247,  238,  240,  248,  249,  250,
      251,  241,  252,    0,  253,  242,  253,  254,  244,   15,
        0,  243,  245,   15,  246,  247,  258,   15,  248,  249,
      250,  251,   15,  252,  255,  259,  255,  254,   15,   16,

      256,   16,  256,   16,  257,   16,  257,  258,  260,  261,
      260,  261,  262,  263,  262,  263,  259,  264,  265,  264,
      265,  266,  267,  266,  268,  269,  268,  278,  274,   16,
      274,    0,  275,   16,  275,    0,  276,   16,  276,  277,
      281,  277,   16,  267,  282,  286,  269,  278,   16,   17,
        0,   17,  257,   17,  279,   17,  279,  280,  283,  280,
      283,  281,  284,  289,  284,  282,  286,  287,  285,  287,
      285,  288,  290,  288,  290,  291,  292,  291,    0,   17,
      285,  294,    0,   17,  289,    0,  293,   17,  293,  295,
      300,  295,   17,  296,  298,  296,  298,  292,   17,   18,

      285,   18,  294,   18,  297,   18,  297,  299,    0,  299,
      284,  300,  301,  302,  301,  287,  285,  303,  304,  303,
      304,  305,  306,  305,  306,  307,  308,    0,  308,   18,
      309,    0,  309,   18,  302,  310,  311,   18,  311,    0,
        0,  312,   18,  312,    0,  313,  307,  313,   18,   19,
        0,   19,  297,   19,    0,   19,  310,  314,    0,  314,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   19,
        0,    0,    0,   19,    0,    0,    0,   19,    0,  312,
        0,    0,   19,    0,    0,    0,    0,    0,   19,   20,

        0,   20,    0,   20,    0,   20,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   20,
        0,    0,    0,   20,    0,    0,    0,   20,    0,    0,
        0,    0,   20,    0,    0,    0,    0,    0,   20,   21,
       21,   21,    0,   21,    0,   21,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   21,
        0,    0,    0,   21,    0,    0,    0,   21,    0,    0,
        0,    0,   21,    0,    0,    0,    0,    0,   21,   22,

       22,   22,    0,   22,    0,   22,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   22,
        0,    0,    0,   22,    0,    0,    0,   22,    0,    0,
        0,    0,   22,    0,    0,    0,    0,    0,   22,   29,
        0,   29,    0,   29,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   29,
        0,    0,    0,   29,    0,    0,    0,   29,    0,    0,
        0,    0,   29,    0,    0,    0,    0,    0,   29,   43,

        0,   43,   43,   43,    0,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,   43,   43,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   43,
        0,    0,   43,   43,    0,    0,   43,   43,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,   43,   60,
        0,   60,   60,   60,    0,    0,    0,    0,    0,    0,
        0,    0,   60,    0,    0,    0,   60,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   60,    0,    0,    0,    0,   60,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   60,   72,

        0,   72,    0,   72,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
        0,    0,    0,   72,    0,    0,    0,   72,    0,    0,
        0,    0,   72,    0,    0,    0,    0,    0,   72,   86,
        0,   86,    0,   86,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   86,
        0,    0,    0,   86,    0,    0,    0,   86,    0,    0,
        0,    0,   86,    0,    0,    0,    0,    0,   86,  100,

        0,  100,    0,  100,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
        0,    0,    0,  100,    0,    0,    0,  100,    0,    0,
        0,    0,  100,    0,    0,    0,    0,    0,  100,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315
    } ;

static yyconst flex_int16_t yy_rule_linenum[70] =
    {   0,
      114,  115,  116,  119,  120,  121,  122,  126,  127,  128,
      129,  130,  132,  137,  138,  139,  140,  145,  147,  150,
      151,  152,  153,  154,  155,  158,  168,  169,  170,  171,
      172,  175,  189,  190,  191,  194,  195,  199,  200,  201,
      202,  203,  204,  206,  211,  212,  213,  214,  215,  217,
      221,  222,  226,  227,  228,  229,  230,  231,  234,  244,
      245,  246,  247,  248,  251,  263,  264,  265,  266
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "configparser.l"
/* environment preparation */

/* ======================================================== */
/* constans and tokens preparation */
/* ======================================================== */
/* starting condition setup and stack enable */

#line 950 "lex.yy.cc"

#define INITIAL 0
#define logEnv 1
#define triggerEnv 2
#define resourceSetEnv 3
#define resourceSingleNoEnv 4
#define triggerDurationSetEnv 5
#define triggerDurationSingleNoEnv 6
#define logDurationSetEnv 7
#define logDurationSingleNoEnv 8
#define logResolutionSetEnv 9
#define logResolutionSingleNoEnv 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#ifdef _WIN32
#include <io.h>
#else
#include <unistd.h>
#endif
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 103 "configparser.l"


	/* ============================================================================================================= */
	/* ============================================== PARSING ====================================================== */
	/* ============================================================================================================= */
	/* ======================================================== */
	/* trigger parsing */
	/* trigger cpu over {70%, 80%, 90%} last for {20s, 1m} */
	/* trigger memory under 200MB last for 2h30m */
#line 1167 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 316 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1150 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 70 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 70 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 71 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

/*======= resource type */
case 1:
YY_RULE_SETUP
#line 114 "configparser.l"
currentTriggerType.resource = TriggerType::Resource::CPU;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 115 "configparser.l"
currentTriggerType.resource = TriggerType::Resource::MEMORY;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "configparser.l"
currentTriggerType.resource = TriggerType::Resource::DISK;
	YY_BREAK
/*======= over/under */
case 4:
YY_RULE_SETUP
#line 119 "configparser.l"
currentTriggerType.fluctuationType = TriggerType::FluctuationType::UNDER; yy_push_state(resourceSetEnv);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 120 "configparser.l"
currentTriggerType.fluctuationType = TriggerType::FluctuationType::UNDER; yy_push_state(resourceSingleNoEnv);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 121 "configparser.l"
currentTriggerType.fluctuationType = TriggerType::FluctuationType::OVER; yy_push_state(resourceSetEnv);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 122 "configparser.l"
currentTriggerType.fluctuationType = TriggerType::FluctuationType::OVER; yy_push_state(resourceSingleNoEnv);
	YY_BREAK
/* bracket with set of values */

case 8:
YY_RULE_SETUP
#line 126 "configparser.l"
currentResourceValue.value = atol(yytext);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 127 "configparser.l"
currentResourceValue.unitType = ResourceValue::ResourceUnit::PERCENT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 128 "configparser.l"
currentResourceValue.unitType = ResourceValue::ResourceUnit::MB;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 129 "configparser.l"
currentResourceValue.unitType = ResourceValue::ResourceUnit::GB;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 130 "configparser.l"
triggerResourceValues.push_back(currentResourceValue);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 132 "configparser.l"
triggerResourceValues.push_back(currentResourceValue); yy_pop_state();
	YY_BREAK

/* plain value */

case 14:
YY_RULE_SETUP
#line 137 "configparser.l"
currentResourceValue.value = atol(yytext);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 138 "configparser.l"
currentResourceValue.unitType = ResourceValue::ResourceUnit::PERCENT; triggerResourceValues.push_back(currentResourceValue); yy_pop_state();
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 139 "configparser.l"
currentResourceValue.unitType = ResourceValue::ResourceUnit::MB; triggerResourceValues.push_back(currentResourceValue); yy_pop_state(); 
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 140 "configparser.l"
currentResourceValue.unitType = ResourceValue::ResourceUnit::GB; triggerResourceValues.push_back(currentResourceValue); yy_pop_state();
	YY_BREAK

/*======= fluctuation duration */
/* durations set */
case 18:
YY_RULE_SETUP
#line 145 "configparser.l"
yy_push_state(triggerDurationSetEnv);
	YY_BREAK
/* single duration */
case 19:
YY_RULE_SETUP
#line 147 "configparser.l"
yy_push_state(triggerDurationSingleNoEnv);
	YY_BREAK

case 20:
YY_RULE_SETUP
#line 150 "configparser.l"
lastReadDurationElement = atol(yytext);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 151 "configparser.l"
currentDurationTime += lastReadDurationElement; 				/* no of seconds in seconds */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 152 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_MIN;	/* no of seconds in minute */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 153 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_HOUR;	/* no of seconds in hour */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 154 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_DAY;	/* no of seconds in day */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 155 "configparser.l"
triggerDurationTimes.push_back(currentDurationTime); currentDurationTime = 0;
	YY_BREAK
/* END OF LINE PROCCESSING: pop from stack triggerDurationSetEnv and triggerEnv */
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 158 "configparser.l"
{
			triggerDurationTimes.push_back(currentDurationTime); 
			currentDurationTime = 0; 
			yy_pop_state(); yy_pop_state(); /* back to INITIAL */
			produceTriggersCrossproduct();
		}
	YY_BREAK

/* plain value */

case 27:
YY_RULE_SETUP
#line 168 "configparser.l"
lastReadDurationElement = atol(yytext);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 169 "configparser.l"
currentDurationTime += lastReadDurationElement; 				/* no of seconds in seconds */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 170 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_MIN;	/* no of seconds in minute */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 171 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_HOUR;	/* no of seconds in hour */
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 172 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_DAY;	/* no of seconds in day */
	YY_BREAK
/* END OF LINE PROCCESSING: pop from stack triggerDurationSetEnv and triggerEnv */
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 175 "configparser.l"
{
			triggerDurationTimes.push_back(currentDurationTime); 
			currentDurationTime = 0; 
			yy_pop_state(); yy_pop_state(); /* back to INITIAL */
			produceTriggersCrossproduct();
		}
	YY_BREAK


/* ======================================================== */
/* log parsing */

/*======= resource type */
case 33:
YY_RULE_SETUP
#line 189 "configparser.l"
currentLogType.resource = LogType::Resource::CPU;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 190 "configparser.l"
currentLogType.resource = LogType::Resource::MEMORY;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 191 "configparser.l"
currentLogType.resource = LogType::Resource::DISK;
	YY_BREAK
/*======= log duration time */
case 36:
YY_RULE_SETUP
#line 194 "configparser.l"
yy_push_state(logDurationSetEnv);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 195 "configparser.l"
yy_push_state(logDurationSingleNoEnv);
	YY_BREAK
/* durations set */

case 38:
YY_RULE_SETUP
#line 199 "configparser.l"
lastReadDurationElement = atol(yytext);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 200 "configparser.l"
currentDurationTime += lastReadDurationElement; 				/* no of seconds in seconds */
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 201 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_MIN;	/* no of seconds in minute */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 202 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_HOUR;	/* no of seconds in hour */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 203 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_DAY;	/* no of seconds in day */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 204 "configparser.l"
logDurations.push_back(currentDurationTime); currentDurationTime = 0;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 206 "configparser.l"
logDurations.push_back(currentDurationTime); currentDurationTime = 0; yy_pop_state(); 
	YY_BREAK

/* plain value */

case 45:
YY_RULE_SETUP
#line 211 "configparser.l"
lastReadDurationElement = atol(yytext);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 212 "configparser.l"
currentDurationTime += lastReadDurationElement; 				/* no of seconds in seconds */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 213 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_MIN;	/* no of seconds in minute */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 214 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_HOUR;	/* no of seconds in hour */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 215 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_DAY;	/* no of seconds in day */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 217 "configparser.l"
logDurations.push_back(currentDurationTime); currentDurationTime = 0; yy_pop_state();
	YY_BREAK

/*======= log resolution */
case 51:
YY_RULE_SETUP
#line 221 "configparser.l"
yy_push_state(logResolutionSetEnv);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 222 "configparser.l"
yy_push_state(logResolutionSingleNoEnv);
	YY_BREAK
/* resolution set */

case 53:
YY_RULE_SETUP
#line 226 "configparser.l"
lastReadDurationElement = atol(yytext);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 227 "configparser.l"
currentDurationTime += lastReadDurationElement; 				/* no of seconds in seconds */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 228 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_MIN;	/* no of seconds in minute */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 229 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_HOUR;	/* no of seconds in hour */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 230 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_DAY;	/* no of seconds in day */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 231 "configparser.l"
logResolutions.push_back(currentDurationTime); currentDurationTime = 0;
	YY_BREAK
/* END OF LINE PROCCESSING: pop from stack logResolutionSetEnv and logEnv */
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 234 "configparser.l"
{
				logResolutions.push_back(currentDurationTime); 
				currentDurationTime = 0; 
				yy_pop_state(); yy_pop_state(); /* back to INITIAL */
				produceLogsCrossproduct();
			}
	YY_BREAK

/* plain resolution value */

case 60:
YY_RULE_SETUP
#line 244 "configparser.l"
lastReadDurationElement = atol(yytext);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 245 "configparser.l"
currentDurationTime += lastReadDurationElement; 				/* no of seconds in seconds */
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 246 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_MIN;	/* no of seconds in minute */
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 247 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_HOUR;	/* no of seconds in hour */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 248 "configparser.l"
currentDurationTime += lastReadDurationElement * SEC_IN_DAY;	/* no of seconds in day */
	YY_BREAK
/* END OF LINE PROCCESSING: pop from stack logResolutionSingleNoEnv and logEnv */
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 251 "configparser.l"
{
			logResolutions.push_back(currentDurationTime); 
			currentDurationTime = 0; 
			yy_pop_state(); yy_pop_state(); /* back to INITIAL */
			produceLogsCrossproduct();
		}
	YY_BREAK


/* ======================================================== */
/* start environment distinction */
case 66:
YY_RULE_SETUP
#line 263 "configparser.l"
/* consume whitespaces at the beggining */
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 264 "configparser.l"
/* consume whitespaces at the beggining */
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 265 "configparser.l"
yy_push_state(logEnv);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 266 "configparser.l"
yy_push_state(triggerEnv);
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(logEnv):
case YY_STATE_EOF(triggerEnv):
case YY_STATE_EOF(resourceSetEnv):
case YY_STATE_EOF(resourceSingleNoEnv):
case YY_STATE_EOF(triggerDurationSetEnv):
case YY_STATE_EOF(triggerDurationSingleNoEnv):
case YY_STATE_EOF(logDurationSetEnv):
case YY_STATE_EOF(logDurationSingleNoEnv):
case YY_STATE_EOF(logResolutionSetEnv):
case YY_STATE_EOF(logResolutionSingleNoEnv):
#line 267 "configparser.l"
yyterminate();
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 270 "configparser.l"
ECHO;
	YY_BREAK
#line 1677 "lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( FLEX_STD istream* arg_yyin, FLEX_STD ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 316 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 316 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 315);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 270 "configparser.l"




//int main( int /* argc */, char** /* argv */ )
//{
//	std::ifstream ifs = std::ifstream("exfile", std::ifstream::in);
//    FlexLexer* lexer = new yyFlexLexer(ifs, std::cout);
//    int i = 0;
//    while(lexer->yylex() != 0) { }
//    //logTypesValue();
//    std::cout << "trig no: " << triggerTypes.size() << std::endl;
////    for (auto &&trig : triggerTypes) {
////    	std::cout << trig.value.value << " ";
////    }
////    std::cout << std::endl;
//    std::cout << "log no: " << logTypes.size() << std::endl;
////    for (auto &&log : logTypes) {
////		std::cout << log.resolution << " ";
////	}
////    std::cout << std::endl;
//    
//    return 0;
//}



